# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:04:04+00:00



import argparse
import json
import os
from datetime import date
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    BrandVettingEnumVettingProvider,
    MessagingV1BrandRegistrations,
    MessagingV1BrandRegistrationsBrandRegistrationOtp,
    MessagingV1BrandRegistrationsBrandVetting,
    MessagingV1Deactivation,
    MessagingV1DomainCertV4,
    MessagingV1DomainConfig,
    MessagingV1DomainConfigMessagingService,
    MessagingV1ExternalCampaign,
    MessagingV1LinkshorteningMessagingService,
    MessagingV1Service,
    MessagingV1ServiceAlphaSender,
    MessagingV1ServicePhoneNumber,
    MessagingV1ServiceShortCode,
    MessagingV1ServiceUsAppToPerson,
    MessagingV1ServiceUsAppToPersonUsecase,
    MessagingV1TollfreeVerification,
    MessagingV1Usecase,
    TollfreeVerificationEnumStatus,
    V1A2pBrandRegistrationsBrandSidVettingsGetResponse,
    V1A2pBrandRegistrationsGetResponse,
    V1ServicesGetResponse,
    V1ServicesMessagingServiceSidComplianceUsa2pGetResponse,
    V1ServicesServiceSidAlphaSendersGetResponse,
    V1ServicesServiceSidPhoneNumbersGetResponse,
    V1ServicesServiceSidShortCodesGetResponse,
    V1TollfreeVerificationsGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Messaging',
    version='1.42.0',
    servers=[{'url': 'https://messaging.twilio.com'}],
)


@app.get(
    '/v1/Deactivations',
    description=""" Fetch a list of all United States numbers that have been deactivated on a specific date. """,
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_deactivation(date: Optional[date] = Query(None, alias='Date')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/LinkShortening/Domains/{DomainSid}/Certificate',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_domain_cert_v4(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/LinkShortening/Domains/{DomainSid}/Certificate',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_domain_cert_v4(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/LinkShortening/Domains/{DomainSid}/Certificate',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_domain_cert_v4(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/LinkShortening/Domains/{DomainSid}/Config',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_domain_config(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/LinkShortening/Domains/{DomainSid}/Config',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_domain_config(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}',
    tags=['domain_config_management', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_linkshortening_messaging_service(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid'),
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}',
    tags=['domain_config_management', 'service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_linkshortening_messaging_service(
    domain_sid: constr(
        pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='DomainSid'),
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/LinkShortening/MessagingService/{MessagingServiceSid}/DomainConfig',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_domain_config_messaging_service(
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_service(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_service(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/PreregisteredUsa2p',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_external_campaign(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/Usecases',
    tags=[
        'domain_cert_management',
        'domain_config_management',
        'link_shortener_management',
        'user_application_relationship_management',
        'alpha_sender_management',
        'phone_number_management',
        'short_code_management',
        'service_management',
        'toll_free_verification_management',
        'brand_registration_management',
        'brand_vetting_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_usecase():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_us_app_to_person(
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_us_app_to_person(
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/Usecases',
    tags=['brand_registration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_us_app_to_person_usecase(
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
    brand_registration_sid: Optional[
        constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Query(None, alias='BrandRegistrationSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_us_app_to_person(
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
    sid: constr(pattern=r'^QE[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_us_app_to_person(
    messaging_service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='MessagingServiceSid'),
    sid: constr(pattern=r'^QE[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/AlphaSenders',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_alpha_sender(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/AlphaSenders',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_alpha_sender(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/AlphaSenders/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_alpha_sender(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/AlphaSenders/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_alpha_sender(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/PhoneNumbers',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_phone_number(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/PhoneNumbers',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_phone_number(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_phone_number(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_phone_number(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/ShortCodes',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_short_code(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{ServiceSid}/ShortCodes',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_short_code(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{ServiceSid}/ShortCodes/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_short_code(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{ServiceSid}/ShortCodes/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_short_code(
    service_sid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='ServiceSid'),
    sid: str = Path(..., alias='Sid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Services/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_service(
    sid: constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Services/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_service(
    sid: constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Services/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_service(
    sid: constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Tollfree/Verifications',
    tags=['toll_free_verification_management', 'phone_number_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_tollfree_verification(
    tollfree_phone_number_sid: Optional[
        constr(pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Query(None, alias='TollfreePhoneNumberSid'),
    status: Optional[TollfreeVerificationEnumStatus] = Query(None, alias='Status'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Tollfree/Verifications',
    tags=[
        'domain_cert_management',
        'domain_config_management',
        'link_shortener_management',
        'user_application_relationship_management',
        'alpha_sender_management',
        'phone_number_management',
        'short_code_management',
        'service_management',
        'toll_free_verification_management',
        'brand_registration_management',
        'brand_vetting_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_tollfree_verification(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Tollfree/Verifications/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_tollfree_verification(
    sid: constr(pattern=r'^HH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Tollfree/Verifications/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_tollfree_verification(
    sid: constr(pattern=r'^HH[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/a2p/BrandRegistrations',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_brand_registrations(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/a2p/BrandRegistrations',
    tags=['domain_config_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_brand_registrations(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/a2p/BrandRegistrations/{BrandRegistrationSid}/SmsOtp',
    tags=['brand_registration_management', 'brand_vetting_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_brand_registration_otp(
    brand_registration_sid: constr(
        pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='BrandRegistrationSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings',
    tags=['brand_registration_management', 'brand_vetting_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_brand_vetting(
    brand_sid: constr(
        pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='BrandSid'),
    vetting_provider: Optional[BrandVettingEnumVettingProvider] = Query(
        None, alias='VettingProvider'
    ),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings',
    tags=['brand_registration_management', 'brand_vetting_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_brand_vetting(
    brand_sid: constr(
        pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='BrandSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/a2p/BrandRegistrations/{BrandSid}/Vettings/{BrandVettingSid}',
    tags=['brand_registration_management', 'brand_vetting_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_brand_vetting(
    brand_sid: constr(
        pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='BrandSid'),
    brand_vetting_sid: constr(
        pattern=r'^VT[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='BrandVettingSid'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/a2p/BrandRegistrations/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_brand_registrations(
    sid: constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/a2p/BrandRegistrations/{Sid}',
    tags=['service_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_brand_registrations(
    sid: constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
