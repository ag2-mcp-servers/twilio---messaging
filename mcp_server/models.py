# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:04:04+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field, constr


class BrandRegistrationsEnumBrandFeedback(Enum):
    TAX_ID = 'TAX_ID'
    STOCK_SYMBOL = 'STOCK_SYMBOL'
    NONPROFIT = 'NONPROFIT'
    GOVERNMENT_ENTITY = 'GOVERNMENT_ENTITY'
    OTHERS = 'OTHERS'


class BrandRegistrationsEnumIdentityStatus(Enum):
    SELF_DECLARED = 'SELF_DECLARED'
    UNVERIFIED = 'UNVERIFIED'
    VERIFIED = 'VERIFIED'
    VETTED_VERIFIED = 'VETTED_VERIFIED'


class BrandRegistrationsEnumStatus(Enum):
    PENDING = 'PENDING'
    APPROVED = 'APPROVED'
    FAILED = 'FAILED'
    IN_REVIEW = 'IN_REVIEW'
    DELETED = 'DELETED'


class BrandVettingEnumVettingProvider(Enum):
    campaign_verify = 'campaign-verify'


class MessagingV1BrandRegistrations(BaseModel):
    a2p_profile_bundle_sid: Optional[
        constr(pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='A2P Messaging Profile Bundle BundleSid.')
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.',
    )
    brand_feedback: Optional[List[BrandRegistrationsEnumBrandFeedback]] = Field(
        None, description='Feedback on how to improve brand score'
    )
    brand_score: Optional[int] = Field(
        None,
        description="The secondary vetting score if it was done. Otherwise, it will be the brand score if it's returned from TCR. It may be null if no score is available.",
    )
    brand_type: Optional[str] = Field(
        None,
        description='Type of brand. One of: "STANDARD", "SOLE_PROPRIETOR". SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.',
    )
    customer_profile_bundle_sid: Optional[
        constr(pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='A2P Messaging Profile Bundle BundleSid.')
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    failure_reason: Optional[str] = Field(
        None,
        description='A reason why brand registration has failed. Only applicable when status is FAILED.',
    )
    government_entity: Optional[bool] = Field(
        None, description='Identified as a government entity'
    )
    identity_status: Optional[BrandRegistrationsEnumIdentityStatus] = Field(
        None,
        description='When a brand is registered, TCR will attempt to verify the identity of the brand based on the supplied information.',
    )
    links: Optional[Dict[str, Any]] = None
    mock: Optional[bool] = Field(
        None,
        description='A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.',
    )
    russell_3000: Optional[bool] = Field(
        None, description='Publicly traded company identified in the Russell 3000 Index'
    )
    sid: Optional[
        constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique string to identify Brand Registration.')
    skip_automatic_sec_vet: Optional[bool] = Field(
        None,
        description='A flag to disable automatic secondary vetting for brands which it would otherwise be done.',
    )
    status: Optional[BrandRegistrationsEnumStatus] = Field(
        None,
        description='Brand Registration status. One of "PENDING", "APPROVED", "FAILED", "IN_REVIEW", "DELETED".',
    )
    tax_exempt_status: Optional[str] = Field(
        None,
        description='Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.',
    )
    tcr_id: Optional[str] = Field(
        None,
        description='Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.',
    )
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the Brand Registration resource.'
    )


class MessagingV1BrandRegistrationsBrandRegistrationOtp(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.',
    )
    brand_registration_sid: Optional[
        constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string to identify Brand Registration of Sole Proprietor Brand',
    )


class MessagingV1BrandRegistrationsBrandVetting(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the vetting record.',
    )
    brand_sid: Optional[
        constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique string to identify Brand Registration.')
    brand_vetting_sid: Optional[
        constr(pattern=r'^VT[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The Twilio SID of the third-party vetting record.')
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the Brand Vetting resource.'
    )
    vetting_class: Optional[str] = Field(
        None,
        description='The type of vetting that has been conducted. One of “STANDARD” (Aegis) or “POLITICAL” (Campaign Verify).',
    )
    vetting_id: Optional[str] = Field(
        None,
        description='The unique identifier of the vetting from the third-party provider.',
    )
    vetting_provider: Optional[BrandVettingEnumVettingProvider] = Field(
        None,
        description='The third-party provider that has conducted the vetting. One of “CampaignVerify” (Campaign Verify tokens) or “AEGIS” (Secondary Vetting).',
    )
    vetting_status: Optional[str] = Field(
        None,
        description='The status of the import vetting attempt. One of “PENDING,” “SUCCESS,” or “FAILED”.',
    )


class MessagingV1Deactivation(BaseModel):
    redirect_to: Optional[AnyUrl] = Field(
        None,
        description='Returns an authenticated url that redirects to a file containing the deactivated numbers for the requested day. This url is valid for up to two minutes.',
    )


class MessagingV1DomainCertV4(BaseModel):
    cert_in_validation: Optional[Any] = Field(
        None,
        description='Optional JSON field describing the status and upload date of a new certificate in the process of validation',
    )
    certificate_sid: Optional[
        constr(pattern=r'^CW[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify this Certificate resource.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='Date that this Domain was registered to the Twilio platform to create a new Domain object.',
    )
    date_expires: Optional[datetime] = Field(
        None,
        description='Date that the private certificate associated with this domain expires. You will need to update the certificate before that date to ensure your shortened links will continue to work.',
    )
    date_updated: Optional[datetime] = Field(
        None, description='Date that this Domain was last updated.'
    )
    domain_name: Optional[AnyUrl] = Field(
        None, description='Full url path for this domain.'
    )
    domain_sid: Optional[
        constr(pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Domain resource.',
    )
    url: Optional[AnyUrl] = None


class MessagingV1DomainConfig(BaseModel):
    callback_url: Optional[AnyUrl] = Field(
        None,
        description='URL to receive click events to your webhook whenever the recipients click on the shortened links.',
    )
    config_sid: Optional[
        constr(pattern=r'^ZK[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Domain config (prefix ZK).',
    )
    date_created: Optional[datetime] = Field(
        None, description='Date this Domain Config was created.'
    )
    date_updated: Optional[datetime] = Field(
        None, description='Date that this Domain Config was last updated.'
    )
    domain_sid: Optional[
        constr(pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Domain resource.',
    )
    fallback_url: Optional[AnyUrl] = Field(
        None,
        description='Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.',
    )
    url: Optional[AnyUrl] = None


class MessagingV1DomainConfigMessagingService(BaseModel):
    callback_url: Optional[AnyUrl] = Field(
        None,
        description='URL to receive click events to your webhook whenever the recipients click on the shortened links.',
    )
    config_sid: Optional[
        constr(pattern=r'^ZK[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Domain config (prefix ZK).',
    )
    date_created: Optional[datetime] = Field(
        None, description='Date this Domain Config was created.'
    )
    date_updated: Optional[datetime] = Field(
        None, description='Date that this Domain Config was last updated.'
    )
    domain_sid: Optional[
        constr(pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Domain resource.',
    )
    fallback_url: Optional[AnyUrl] = Field(
        None,
        description='Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.',
    )
    messaging_service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The unique string that identifies the messaging service'
    )
    url: Optional[AnyUrl] = None


class MessagingV1ExternalCampaign(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Campaign belongs to.',
    )
    campaign_id: Optional[str] = Field(
        None, description='ID of the preregistered campaign.'
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    messaging_service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) that the resource is associated with.',
    )
    sid: Optional[
        constr(pattern=r'^QE[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that identifies a US A2P Compliance resource `QE2c6890da8086d771620e9b13fadeba0b`.',
    )


class MessagingV1LinkshorteningMessagingService(BaseModel):
    domain_sid: Optional[
        constr(pattern=r'^DN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique string identifies the domain resource')
    messaging_service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The unique string that identifies the messaging service'
    )
    url: Optional[AnyUrl] = None


class FallbackMethod(Enum):
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


class InboundMethod(Enum):
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


class MessagingV1ServiceAlphaSender(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the AlphaSender resource.',
    )
    alpha_sender: Optional[str] = Field(
        None, description='The Alphanumeric Sender ID string.'
    )
    capabilities: Optional[List[str]] = Field(
        None,
        description='An array of values that describe whether the number can receive calls or messages. Can be: `SMS`.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the resource is associated with.',
    )
    sid: Optional[
        constr(pattern=r'^AI[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the AlphaSender resource.',
    )
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the AlphaSender resource.'
    )


class MessagingV1ServicePhoneNumber(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the PhoneNumber resource.',
    )
    capabilities: Optional[List[str]] = Field(
        None,
        description='An array of values that describe whether the number can receive calls or messages. Can be: `Voice`, `SMS`, and `MMS`.',
    )
    country_code: Optional[str] = Field(
        None,
        description='The 2-character [ISO Country Code](https://www.iso.org/iso-3166-country-codes.html) of the number.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    phone_number: Optional[str] = Field(
        None,
        description='The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.',
    )
    service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the resource is associated with.',
    )
    sid: Optional[
        constr(pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the PhoneNumber resource.',
    )
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the PhoneNumber resource.'
    )


class MessagingV1ServiceShortCode(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource.',
    )
    capabilities: Optional[List[str]] = Field(
        None,
        description='An array of values that describe whether the number can receive calls or messages. Can be: `SMS` and `MMS`.',
    )
    country_code: Optional[str] = Field(
        None,
        description='The 2-character [ISO Country Code](https://www.iso.org/iso-3166-country-codes.html) of the number.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Service](https://www.twilio.com/docs/chat/rest/service-resource) the resource is associated with.',
    )
    short_code: Optional[str] = Field(
        None,
        description='The [E.164](https://www.twilio.com/docs/glossary/what-e164) format of the short code.',
    )
    sid: Optional[
        constr(pattern=r'^SC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the ShortCode resource.',
    )
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the ShortCode resource.'
    )


class MessagingV1ServiceUsAppToPerson(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that the Campaign belongs to.',
    )
    brand_registration_sid: Optional[
        constr(pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique string to identify the A2P brand.')
    campaign_id: Optional[str] = Field(
        None, description='The Campaign Registry (TCR) Campaign ID.'
    )
    campaign_status: Optional[str] = Field(
        None, description='Campaign status. Examples: IN_PROGRESS, VERIFIED, FAILED.'
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    description: Optional[str] = Field(
        None,
        description='A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.',
    )
    has_embedded_links: Optional[bool] = Field(
        None,
        description='Indicate that this SMS campaign will send messages that contain links.',
    )
    has_embedded_phone: Optional[bool] = Field(
        None,
        description='Indicates that this SMS campaign will send messages that contain phone numbers.',
    )
    help_keywords: Optional[List[str]] = Field(
        None,
        description="End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.",
    )
    help_message: Optional[str] = Field(
        None,
        description="When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.",
    )
    is_externally_registered: Optional[bool] = Field(
        None,
        description='Indicates whether the campaign was registered externally or not.',
    )
    message_flow: Optional[str] = Field(
        None,
        description='Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.',
    )
    message_samples: Optional[List[str]] = Field(
        None,
        description='Message samples, at least 1 and up to 5 sample messages (at least 2 for starter/sole proprietor), >=20 chars, <=1024 chars each.',
    )
    messaging_service_sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) that the resource is associated with.',
    )
    mock: Optional[bool] = Field(
        None,
        description='A boolean that specifies whether campaign is a mock or not. Mock campaigns will be automatically created if using a mock brand. Mock campaigns should only be used for testing purposes.',
    )
    opt_in_keywords: Optional[List[str]] = Field(
        None,
        description='If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.',
    )
    opt_in_message: Optional[str] = Field(
        None,
        description='If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.',
    )
    opt_out_keywords: Optional[List[str]] = Field(
        None,
        description="End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.",
    )
    opt_out_message: Optional[str] = Field(
        None,
        description="Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.",
    )
    rate_limits: Optional[Any] = Field(
        None,
        description='Rate limit and/or classification set by each carrier, Ex. AT&T or T-Mobile.',
    )
    sid: Optional[
        constr(pattern=r'^QE[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that identifies a US A2P Compliance resource `QE2c6890da8086d771620e9b13fadeba0b`.',
    )
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the US App to Person resource.'
    )
    us_app_to_person_usecase: Optional[str] = Field(
        None,
        description='A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING, SOLE_PROPRIETOR...]. SOLE_PROPRIETOR campaign use cases can only be created by SOLE_PROPRIETOR Brands, and there can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR Brand.',
    )


class MessagingV1ServiceUsAppToPersonUsecase(BaseModel):
    us_app_to_person_usecases: Optional[List] = Field(
        None,
        description='Human readable name, code, description and post_approval_required (indicates whether or not post approval is required for this Use Case) of A2P Campaign Use Cases.',
    )


class MessagingV1Usecase(BaseModel):
    usecases: Optional[List] = Field(
        None,
        description='Human readable use case details (usecase, description and purpose) of Messaging Service Use Cases.',
    )


class ServiceEnumScanMessageContent(Enum):
    inherit = 'inherit'
    enable = 'enable'
    disable = 'disable'


class TollfreeVerificationEnumOptInType(Enum):
    VERBAL = 'VERBAL'
    WEB_FORM = 'WEB_FORM'
    PAPER_FORM = 'PAPER_FORM'
    VIA_TEXT = 'VIA_TEXT'
    MOBILE_QR_CODE = 'MOBILE_QR_CODE'


class TollfreeVerificationEnumStatus(Enum):
    PENDING_REVIEW = 'PENDING_REVIEW'
    IN_REVIEW = 'IN_REVIEW'
    TWILIO_APPROVED = 'TWILIO_APPROVED'
    TWILIO_REJECTED = 'TWILIO_REJECTED'


class V1LinkShorteningDomainsDomainSidCertificatePostRequest(BaseModel):
    TlsCert: str = Field(
        ...,
        description='Contains the full TLS certificate and private for this domain in PEM format: https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail. Twilio uses this information to process HTTPS traffic sent to your domain.',
    )


class V1LinkShorteningDomainsDomainSidConfigPostRequest(BaseModel):
    CallbackUrl: Optional[AnyUrl] = Field(
        None,
        description='URL to receive click events to your webhook whenever the recipients click on the shortened links',
    )
    FallbackUrl: Optional[AnyUrl] = Field(
        None,
        description='Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.',
    )


class Meta(BaseModel):
    first_page_url: Optional[AnyUrl] = None
    key: Optional[str] = None
    next_page_url: Optional[AnyUrl] = None
    page: Optional[int] = None
    page_size: Optional[int] = None
    previous_page_url: Optional[AnyUrl] = None
    url: Optional[AnyUrl] = None


class V1ServicesPostRequest(BaseModel):
    AreaCodeGeomatch: Optional[bool] = Field(
        None,
        description='Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance.',
    )
    FallbackMethod_1: Optional[FallbackMethod] = Field(
        None,
        alias='FallbackMethod',
        description='The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.',
    )
    FallbackToLongCode: Optional[bool] = Field(
        None,
        description='Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance.',
    )
    FallbackUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.',
    )
    FriendlyName: str = Field(
        ...,
        description='A descriptive string that you create to describe the resource. It can be up to 64 characters long.',
    )
    InboundMethod_1: Optional[InboundMethod] = Field(
        None,
        alias='InboundMethod',
        description='The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.',
    )
    InboundRequestUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.',
    )
    MmsConverter: Optional[bool] = Field(
        None,
        description='Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance.',
    )
    ScanMessageContent: Optional[ServiceEnumScanMessageContent] = Field(
        None, description='Reserved.'
    )
    SmartEncoding: Optional[bool] = Field(
        None,
        description='Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance.',
    )
    StatusCallback: Optional[AnyUrl] = Field(
        None,
        description='The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.',
    )
    StickySender: Optional[bool] = Field(
        None,
        description='Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance.',
    )
    SynchronousValidation: Optional[bool] = Field(None, description='Reserved.')
    UseInboundWebhookOnNumber: Optional[bool] = Field(
        None,
        description='A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.',
    )
    Usecase: Optional[str] = Field(
        None,
        description='A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..].',
    )
    ValidityPeriod: Optional[int] = Field(
        None,
        description='How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.',
    )


class V1ServicesPreregisteredUsa2pPostRequest(BaseModel):
    CampaignId: str = Field(..., description='ID of the preregistered campaign.')
    MessagingServiceSid: constr(
        pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(
        ...,
        description='The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services/api) that the resource is associated with.',
    )


class V1ServicesMessagingServiceSidComplianceUsa2pGetResponse(BaseModel):
    compliance: Optional[List[MessagingV1ServiceUsAppToPerson]] = None
    meta: Optional[Meta] = None


class V1ServicesMessagingServiceSidComplianceUsa2pPostRequest(BaseModel):
    BrandRegistrationSid: constr(
        pattern=r'^BN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(..., description='A2P Brand Registration SID')
    Description: str = Field(
        ...,
        description='A short description of what this SMS campaign does. Min length: 40 characters. Max length: 4096 characters.',
    )
    HasEmbeddedLinks: bool = Field(
        ...,
        description='Indicates that this SMS campaign will send messages that contain links.',
    )
    HasEmbeddedPhone: bool = Field(
        ...,
        description='Indicates that this SMS campaign will send messages that contain phone numbers.',
    )
    HelpKeywords: Optional[List[str]] = Field(
        None,
        description="End users should be able to text in a keyword to receive help. Those keywords must be provided as part of the campaign registration request. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.",
    )
    HelpMessage: Optional[str] = Field(
        None,
        description="When customers receive the help keywords from their end users, Twilio customers are expected to send back an auto-generated response; this may include the brand name and additional support contact information. This field is required if managing help keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.",
    )
    MessageFlow: str = Field(
        ...,
        description='Required for all Campaigns. Details around how a consumer opts-in to their campaign, therefore giving consent to receive their messages. If multiple opt-in methods can be used for the same campaign, they must all be listed. 40 character minimum. 2048 character maximum.',
    )
    MessageSamples: List[str] = Field(
        ...,
        description='Message samples, at least 1 and up to 5 sample messages (at least 2 for sole proprietor), >=20 chars, <=1024 chars each.',
    )
    OptInKeywords: Optional[List[str]] = Field(
        None,
        description='If end users can text in a keyword to start receiving messages from this campaign, those keywords must be provided. This field is required if end users can text in a keyword to start receiving messages from this campaign. Values must be alphanumeric. 255 character maximum.',
    )
    OptInMessage: Optional[str] = Field(
        None,
        description='If end users can text in a keyword to start receiving messages from this campaign, the auto-reply messages sent to the end users must be provided. The opt-in response should include the Brand name, confirmation of opt-in enrollment to a recurring message campaign, how to get help, and clear description of how to opt-out. This field is required if end users can text in a keyword to start receiving messages from this campaign. 20 character minimum. 320 character maximum.',
    )
    OptOutKeywords: Optional[List[str]] = Field(
        None,
        description="End users should be able to text in a keyword to stop receiving messages from this campaign. Those keywords must be provided. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). Values must be alphanumeric. 255 character maximum.",
    )
    OptOutMessage: Optional[str] = Field(
        None,
        description="Upon receiving the opt-out keywords from the end users, Twilio customers are expected to send back an auto-generated response, which must provide acknowledgment of the opt-out request and confirmation that no further messages will be sent. It is also recommended that these opt-out messages include the brand name. This field is required if managing opt out keywords yourself (i.e. not using Twilio's Default or Advanced Opt Out features). 20 character minimum. 320 character maximum.",
    )
    UsAppToPersonUsecase: str = Field(
        ...,
        description='A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..]',
    )


class V1ServicesServiceSidAlphaSendersGetResponse(BaseModel):
    alpha_senders: Optional[List[MessagingV1ServiceAlphaSender]] = None
    meta: Optional[Meta] = None


class V1ServicesServiceSidAlphaSendersPostRequest(BaseModel):
    AlphaSender: str = Field(
        ...,
        description='The Alphanumeric Sender ID string. Can be up to 11 characters long. Valid characters are A-Z, a-z, 0-9, space, hyphen `-`, plus `+`, underscore `_` and ampersand `&`. This value cannot contain only numbers.',
    )


class V1ServicesServiceSidPhoneNumbersGetResponse(BaseModel):
    meta: Optional[Meta] = None
    phone_numbers: Optional[List[MessagingV1ServicePhoneNumber]] = None


class V1ServicesServiceSidPhoneNumbersPostRequest(BaseModel):
    PhoneNumberSid: constr(
        pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(
        ..., description='The SID of the Phone Number being added to the Service.'
    )


class V1ServicesServiceSidShortCodesGetResponse(BaseModel):
    meta: Optional[Meta] = None
    short_codes: Optional[List[MessagingV1ServiceShortCode]] = None


class V1ServicesServiceSidShortCodesPostRequest(BaseModel):
    ShortCodeSid: constr(
        pattern=r'^SC[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(
        ..., description='The SID of the ShortCode resource being added to the Service.'
    )


class V1ServicesSidPostRequest(BaseModel):
    AreaCodeGeomatch: Optional[bool] = Field(
        None,
        description='Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance.',
    )
    FallbackMethod_1: Optional[FallbackMethod] = Field(
        None,
        alias='FallbackMethod',
        description='The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.',
    )
    FallbackToLongCode: Optional[bool] = Field(
        None,
        description='Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance.',
    )
    FallbackUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.',
    )
    FriendlyName: Optional[str] = Field(
        None,
        description='A descriptive string that you create to describe the resource. It can be up to 64 characters long.',
    )
    InboundMethod_1: Optional[InboundMethod] = Field(
        None,
        alias='InboundMethod',
        description='The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.',
    )
    InboundRequestUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.',
    )
    MmsConverter: Optional[bool] = Field(
        None,
        description='Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance.',
    )
    ScanMessageContent: Optional[ServiceEnumScanMessageContent] = Field(
        None, description='Reserved.'
    )
    SmartEncoding: Optional[bool] = Field(
        None,
        description='Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance.',
    )
    StatusCallback: Optional[AnyUrl] = Field(
        None,
        description='The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.',
    )
    StickySender: Optional[bool] = Field(
        None,
        description='Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance.',
    )
    SynchronousValidation: Optional[bool] = Field(None, description='Reserved.')
    UseInboundWebhookOnNumber: Optional[bool] = Field(
        None,
        description='A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.',
    )
    Usecase: Optional[str] = Field(
        None,
        description='A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..]',
    )
    ValidityPeriod: Optional[int] = Field(
        None,
        description='How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.',
    )


class V1TollfreeVerificationsPostRequest(BaseModel):
    AdditionalInformation: Optional[str] = Field(
        None, description='Additional information to be provided for verification.'
    )
    BusinessCity: Optional[str] = Field(
        None,
        description='The city of the business or organization using the Tollfree number.',
    )
    BusinessContactEmail: Optional[str] = Field(
        None,
        description='The email address of the contact for the business or organization using the Tollfree number.',
    )
    BusinessContactFirstName: Optional[str] = Field(
        None,
        description='The first name of the contact for the business or organization using the Tollfree number.',
    )
    BusinessContactLastName: Optional[str] = Field(
        None,
        description='The last name of the contact for the business or organization using the Tollfree number.',
    )
    BusinessContactPhone: Optional[str] = Field(
        None,
        description='The phone number of the contact for the business or organization using the Tollfree number.',
    )
    BusinessCountry: Optional[str] = Field(
        None,
        description='The country of the business or organization using the Tollfree number.',
    )
    BusinessName: str = Field(
        ...,
        description='The name of the business or organization using the Tollfree number.',
    )
    BusinessPostalCode: Optional[str] = Field(
        None,
        description='The postal code of the business or organization using the Tollfree number.',
    )
    BusinessStateProvinceRegion: Optional[str] = Field(
        None,
        description='The state/province/region of the business or organization using the Tollfree number.',
    )
    BusinessStreetAddress: Optional[str] = Field(
        None,
        description='The address of the business or organization using the Tollfree number.',
    )
    BusinessStreetAddress2: Optional[str] = Field(
        None,
        description='The address of the business or organization using the Tollfree number.',
    )
    BusinessWebsite: str = Field(
        ...,
        description='The website of the business or organization using the Tollfree number.',
    )
    CustomerProfileSid: Optional[
        constr(pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description="Customer's Profile Bundle BundleSid.")
    ExternalReferenceId: Optional[str] = Field(
        None,
        description='An optional external reference ID supplied by customer and echoed back on status retrieval.',
    )
    MessageVolume: str = Field(
        ..., description='Estimate monthly volume of messages from the Tollfree Number.'
    )
    NotificationEmail: str = Field(
        ...,
        description='The email address to receive the notification about the verification result. .',
    )
    OptInImageUrls: List[str] = Field(
        ...,
        description='Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.',
    )
    OptInType: TollfreeVerificationEnumOptInType = Field(
        ..., description='Describe how a user opts-in to text messages.'
    )
    ProductionMessageSample: str = Field(
        ..., description='An example of message content, i.e. a sample message.'
    )
    TollfreePhoneNumberSid: constr(
        pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(
        ...,
        description='The SID of the Phone Number associated with the Tollfree Verification.',
    )
    UseCaseCategories: List[str] = Field(
        ...,
        description='The category of the use case for the Tollfree Number. List as many are applicable..',
    )
    UseCaseSummary: str = Field(
        ...,
        description='Use this to further explain how messaging is used by the business or organization.',
    )


class V1TollfreeVerificationsSidPostRequest(BaseModel):
    AdditionalInformation: Optional[str] = Field(
        None, description='Additional information to be provided for verification.'
    )
    BusinessCity: Optional[str] = Field(
        None,
        description='The city of the business or organization using the Tollfree number.',
    )
    BusinessContactEmail: Optional[str] = Field(
        None,
        description='The email address of the contact for the business or organization using the Tollfree number.',
    )
    BusinessContactFirstName: Optional[str] = Field(
        None,
        description='The first name of the contact for the business or organization using the Tollfree number.',
    )
    BusinessContactLastName: Optional[str] = Field(
        None,
        description='The last name of the contact for the business or organization using the Tollfree number.',
    )
    BusinessContactPhone: Optional[str] = Field(
        None,
        description='The phone number of the contact for the business or organization using the Tollfree number.',
    )
    BusinessCountry: Optional[str] = Field(
        None,
        description='The country of the business or organization using the Tollfree number.',
    )
    BusinessName: Optional[str] = Field(
        None,
        description='The name of the business or organization using the Tollfree number.',
    )
    BusinessPostalCode: Optional[str] = Field(
        None,
        description='The postal code of the business or organization using the Tollfree number.',
    )
    BusinessStateProvinceRegion: Optional[str] = Field(
        None,
        description='The state/province/region of the business or organization using the Tollfree number.',
    )
    BusinessStreetAddress: Optional[str] = Field(
        None,
        description='The address of the business or organization using the Tollfree number.',
    )
    BusinessStreetAddress2: Optional[str] = Field(
        None,
        description='The address of the business or organization using the Tollfree number.',
    )
    BusinessWebsite: Optional[str] = Field(
        None,
        description='The website of the business or organization using the Tollfree number.',
    )
    MessageVolume: Optional[str] = Field(
        None,
        description='Estimate monthly volume of messages from the Tollfree Number.',
    )
    NotificationEmail: Optional[str] = Field(
        None,
        description='The email address to receive the notification about the verification result. .',
    )
    OptInImageUrls: Optional[List[str]] = Field(
        None,
        description='Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.',
    )
    OptInType: Optional[TollfreeVerificationEnumOptInType] = Field(
        None, description='Describe how a user opts-in to text messages.'
    )
    ProductionMessageSample: Optional[str] = Field(
        None, description='An example of message content, i.e. a sample message.'
    )
    UseCaseCategories: Optional[List[str]] = Field(
        None,
        description='The category of the use case for the Tollfree Number. List as many are applicable..',
    )
    UseCaseSummary: Optional[str] = Field(
        None,
        description='Use this to further explain how messaging is used by the business or organization.',
    )


class V1A2pBrandRegistrationsGetResponse(BaseModel):
    data: Optional[List[MessagingV1BrandRegistrations]] = None
    meta: Optional[Meta] = None


class V1A2pBrandRegistrationsPostRequest(BaseModel):
    A2PProfileBundleSid: constr(
        pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(..., description='A2P Messaging Profile Bundle Sid.')
    BrandType: Optional[str] = Field(
        None,
        description='Type of brand being created. One of: "STANDARD", "SOLE_PROPRIETOR". SOLE_PROPRIETOR is for low volume, SOLE_PROPRIETOR use cases. STANDARD is for all other use cases.',
    )
    CustomerProfileBundleSid: constr(
        pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Field(..., description='Customer Profile Bundle Sid.')
    Mock: Optional[bool] = Field(
        None,
        description='A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.',
    )
    SkipAutomaticSecVet: Optional[bool] = Field(
        None,
        description='A flag to disable automatic secondary vetting for brands which it would otherwise be done.',
    )


class V1A2pBrandRegistrationsBrandSidVettingsGetResponse(BaseModel):
    data: Optional[List[MessagingV1BrandRegistrationsBrandVetting]] = None
    meta: Optional[Meta] = None


class V1A2pBrandRegistrationsBrandSidVettingsPostRequest(BaseModel):
    VettingId: Optional[str] = Field(None, description='The unique ID of the vetting')
    VettingProvider: BrandVettingEnumVettingProvider = Field(
        ..., description='The third-party provider of the vettings to create .'
    )


class MessagingV1Service(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Service resource.',
    )
    area_code_geomatch: Optional[bool] = Field(
        None,
        description='Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    fallback_method: Optional[FallbackMethod] = Field(
        None,
        description='The HTTP method we use to call `fallback_url`. Can be: `GET` or `POST`.',
    )
    fallback_to_long_code: Optional[bool] = Field(
        None,
        description='Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance.',
    )
    fallback_url: Optional[AnyUrl] = Field(
        None,
        description='The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.',
    )
    friendly_name: Optional[str] = Field(
        None, description='The string that you assigned to describe the resource.'
    )
    inbound_method: Optional[InboundMethod] = Field(
        None,
        description='The HTTP method we use to call `inbound_request_url`. Can be `GET` or `POST`.',
    )
    inbound_request_url: Optional[AnyUrl] = Field(
        None,
        description='The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.',
    )
    links: Optional[Dict[str, Any]] = Field(
        None, description='The absolute URLs of related resources.'
    )
    mms_converter: Optional[bool] = Field(
        None,
        description='Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance.',
    )
    scan_message_content: Optional[ServiceEnumScanMessageContent] = Field(
        None, description='Reserved.'
    )
    sid: Optional[
        constr(pattern=r'^MG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Service resource.',
    )
    smart_encoding: Optional[bool] = Field(
        None,
        description='Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance.',
    )
    status_callback: Optional[AnyUrl] = Field(
        None,
        description='The URL we call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.',
    )
    sticky_sender: Optional[bool] = Field(
        None,
        description='Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance.',
    )
    synchronous_validation: Optional[bool] = Field(None, description='Reserved.')
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the Service resource.'
    )
    us_app_to_person_registered: Optional[bool] = Field(
        None, description='Whether US A2P campaign is registered for this Service.'
    )
    use_inbound_webhook_on_number: Optional[bool] = Field(
        None,
        description='A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.',
    )
    usecase: Optional[str] = Field(
        None,
        description='A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..]',
    )
    validity_period: Optional[int] = Field(
        None,
        description='How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.',
    )


class MessagingV1TollfreeVerification(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Tollfree Verification resource.',
    )
    additional_information: Optional[str] = Field(
        None, description='Additional information to be provided for verification.'
    )
    business_city: Optional[str] = Field(
        None,
        description='The city of the business or organization using the Tollfree number.',
    )
    business_contact_email: Optional[str] = Field(
        None,
        description='The email address of the contact for the business or organization using the Tollfree number.',
    )
    business_contact_first_name: Optional[str] = Field(
        None,
        description='The first name of the contact for the business or organization using the Tollfree number.',
    )
    business_contact_last_name: Optional[str] = Field(
        None,
        description='The last name of the contact for the business or organization using the Tollfree number.',
    )
    business_contact_phone: Optional[str] = Field(
        None,
        description='The phone number of the contact for the business or organization using the Tollfree number.',
    )
    business_country: Optional[str] = Field(
        None,
        description='The country of the business or organization using the Tollfree number.',
    )
    business_name: Optional[str] = Field(
        None,
        description='The name of the business or organization using the Tollfree number.',
    )
    business_postal_code: Optional[str] = Field(
        None,
        description='The postal code of the business or organization using the Tollfree number.',
    )
    business_state_province_region: Optional[str] = Field(
        None,
        description='The state/province/region of the business or organization using the Tollfree number.',
    )
    business_street_address: Optional[str] = Field(
        None,
        description='The address of the business or organization using the Tollfree number.',
    )
    business_street_address2: Optional[str] = Field(
        None,
        description='The address of the business or organization using the Tollfree number.',
    )
    business_website: Optional[str] = Field(
        None,
        description='The website of the business or organization using the Tollfree number.',
    )
    customer_profile_sid: Optional[
        constr(pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description="Customer's Profile Bundle BundleSid.")
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    error_code: Optional[int] = Field(
        None,
        description='The error code given when a Tollfree Verification has been rejected.',
    )
    external_reference_id: Optional[str] = Field(
        None,
        description='An optional external reference ID supplied by customer and echoed back on status retrieval.',
    )
    message_volume: Optional[str] = Field(
        None,
        description='Estimate monthly volume of messages from the Tollfree Number.',
    )
    notification_email: Optional[str] = Field(
        None,
        description='The email address to receive the notification about the verification result. .',
    )
    opt_in_image_urls: Optional[List[str]] = Field(
        None,
        description='Link to an image that shows the opt-in workflow. Multiple images allowed and must be a publicly hosted URL.',
    )
    opt_in_type: Optional[TollfreeVerificationEnumOptInType] = Field(
        None, description='Describe how a user opts-in to text messages.'
    )
    production_message_sample: Optional[str] = Field(
        None, description='An example of message content, i.e. a sample message.'
    )
    regulated_item_sid: Optional[
        constr(pattern=r'^RA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the Regulated Item.')
    rejection_reason: Optional[str] = Field(
        None,
        description='The rejection reason given when a Tollfree Verification has been rejected.',
    )
    resource_links: Optional[Any] = Field(
        None,
        description='The URLs of the documents associated with the Tollfree Verification resource.',
    )
    sid: Optional[
        constr(pattern=r'^HH[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique string to identify Tollfree Verification.')
    status: Optional[TollfreeVerificationEnumStatus] = Field(
        None, description='The compliance status of the Tollfree Verification record.'
    )
    tollfree_phone_number_sid: Optional[
        constr(pattern=r'^PN[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the Phone Number associated with the Tollfree Verification.',
    )
    trust_product_sid: Optional[
        constr(pattern=r'^BU[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='Tollfree TrustProduct Bundle BundleSid.')
    url: Optional[AnyUrl] = Field(
        None, description='The absolute URL of the Tollfree Verification resource.'
    )
    use_case_categories: Optional[List[str]] = Field(
        None,
        description='The category of the use case for the Tollfree Number. List as many are applicable..',
    )
    use_case_summary: Optional[str] = Field(
        None,
        description='Use this to further explain how messaging is used by the business or organization.',
    )


class V1ServicesGetResponse(BaseModel):
    meta: Optional[Meta] = None
    services: Optional[List[MessagingV1Service]] = None


class V1TollfreeVerificationsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    verifications: Optional[List[MessagingV1TollfreeVerification]] = None
